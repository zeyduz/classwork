// CS 2510, Assignment 3

import tester.*;

// to represent a list of Strings
interface ILoString {
    // combine all Strings in this list into one
    String combine();
    ILoString insert(String str);
    ILoString sort();
    boolean isSorted();
    ILoString interleave(ILoString that);
    int getLength();
    String getFirst();
    ILoString getRest();
    ILoString merge(ILoString that);
    ILoString reverse();
    String getLast();
    ILoString deleteLast();
    boolean isDoubledList();
}

// to represent an empty list of Strings
class MtLoString implements ILoString {
    MtLoString(){}
    
    // combine all Strings in this list into one
    public String combine() {
       return "";
    } 
    
    public ILoString insert(String str) {
      return new ConsLoString(str, new MtLoString());
    }
    
    public ILoString sort() {
      return new MtLoString();
    }
    
    public boolean isSorted() {
      return true;
    }
    
    public ILoString interleave(ILoString that) {
      return that;
    }
    
    public int getLength() {
      return 0;
    }
    
    public String getFirst() {
      return "";
    }
    
    public ILoString getRest() {
      return new MtLoString();
    }
    
    public ILoString merge(ILoString that) {
      return that;
    }
    
    public ILoString reverse() {
      return this;
    }
    
    public String getLast() {
      return "";
    }
    
    public ILoString deleteLast() {
      return new MtLoString();
    }
    
    public boolean isDoubledList() {
      return true;
    }
   
}

// to represent a nonempty list of Strings
class ConsLoString implements ILoString {
    String first;
    ILoString rest;
    
    ConsLoString(String first, ILoString rest){
        this.first = first;
        this.rest = rest;  
    }
    
    /*
     TEMPLATE
     FIELDS:
     ... this.first ...         -- String
     ... this.rest ...          -- ILoString
     
     METHODS
     ... this.combine() ...     -- String
     
     METHODS FOR FIELDS
     ... this.first.concat(String) ...        -- String
     ... this.first.compareTo(String) ...     -- int
     ... this.rest.combine() ...              -- String
     
     */
    
    // combine all Strings in this list into one
    public String combine(){
        return this.first.concat(this.rest.combine());
    }  
    
    public ILoString insert(String str) {
      if ( str.toLowerCase().compareTo(this.first.toLowerCase()) <= 0) {
        return new ConsLoString( str , new ConsLoString(this.first, this.rest) );
      }else {
        return new ConsLoString( this.first, this.rest.insert(str));
      }
    }
    
    public ILoString sort() {
      return this.rest.sort().insert(this.first);
    }
    
    public boolean isSorted() {
      if (this.getLength() == 1) {
        return true;
      }
      return (this.first.toLowerCase().compareTo(this.rest.getFirst().toLowerCase()) <= 0) && this.rest.isSorted();
    }
    
    public ILoString interleave(ILoString that) {
      if( that.getLength() == 0) {
        return this;
      }
      return new ConsLoString(this.first, new ConsLoString(that.getFirst(), this.rest.interleave(that.getRest())));
    }
    
    public int getLength() {
      return 1 + this.rest.getLength();
    }
    
    public String getFirst() {
      return this.first;
    }
    
    public ILoString getRest() {
      return this.rest;
    }
    
    public ILoString merge(ILoString that) {
      if( that.getLength() == 0) {
        return this;
      }
      
      if( this.getFirst().toLowerCase().compareTo(that.getFirst().toLowerCase()) <= 0) {
        return new ConsLoString(this.getFirst(), this.rest.merge(that));
      }
      // If the second element we are "looking at" comes first alphabetically:
      return new ConsLoString(that.getFirst(), this.merge(that.getRest()));
    }

    public ILoString reverse() {
      if ( this.getLength() == 1) {
        return new ConsLoString( this.getFirst(), new MtLoString());
      }
      return new ConsLoString( this.getLast(), this.deleteLast().reverse());
    }
    
    public String getLast() {
      if ( this.getLength() == 1 ) {
        return this.getFirst();
      }
      return this.rest.getLast();
    }
    
    public ILoString deleteLast(){
      if ( this.getLength() == 1 ) {
        return new MtLoString();
      }
      return new ConsLoString( this.first, this.rest.deleteLast());
    }
    
    public boolean isDoubledList() {
      if ( this.getLength() == 1) {
        return false;
      }
      if ( this.first.equals(this.rest.getFirst()) ) {
        return this.rest.getRest().isDoubledList();
      }
      return false;
    }
    
}

// to represent examples for lists of strings
class ExamplesStrings{
    
    ILoString mary = new ConsLoString("Mary ",
                    new ConsLoString("had ",
                        new ConsLoString("a ",
                            new ConsLoString("little ",
                                new ConsLoString("lamb.", new MtLoString())))));
    ILoString sandy = new ConsLoString("Sandy ", 
                     new ConsLoString("sells ", 
                         new ConsLoString("seashells.", new MtLoString())));
        
    
    // test the method combine for the lists of Strings
    boolean testCombine(Tester t){
        return 
            t.checkExpect(this.mary.combine(), "Mary had a little lamb.");
    }
    
    boolean testSort(Tester t) {
      return t.checkExpect(new MtLoString(), new MtLoString()) &&
          t.checkExpect(this.mary.sort(), new ConsLoString("a ",
                                     new ConsLoString("had ", 
                                         new ConsLoString("lamb.", 
                                             new ConsLoString("little ", 
                                                 new ConsLoString("Mary ", new MtLoString()))))));
    }
    
    boolean testisSorted(Tester t) {
      return t.checkExpect(new MtLoString().isSorted(), true) &&
          t.checkExpect(this.mary.isSorted(), false) &&
          t.checkExpect(this.mary.sort().isSorted(), true) &&
          t.checkExpect(new ConsLoString("Alton ",
              new ConsLoString("asha ", 
                  new ConsLoString("yaSMIN",
                  new ConsLoString("ZeYnEp.", new MtLoString())))).isSorted(), true);
    }
    
    boolean testInterleave(Tester t) {
      return t.checkExpect(new MtLoString().interleave(new MtLoString()), new MtLoString()) &&
          t.checkExpect(new MtLoString().interleave(this.mary), this.mary) &&
          t.checkExpect(this.mary.interleave(new MtLoString()), this.mary) &&
          t.checkExpect(this.mary.interleave(this.mary), new ConsLoString("Mary ",
            new ConsLoString("Mary ",
              new ConsLoString("had ",
                new ConsLoString("had ",
                  new ConsLoString("a ",
                    new ConsLoString("a ",
                      new ConsLoString("little ",
                        new ConsLoString("little ",
                          new ConsLoString("lamb.",
                            new ConsLoString("lamb.", new MtLoString()))))))))))) &&
          t.checkExpect(this.mary.interleave(this.sandy), new ConsLoString("Mary ",
              new ConsLoString("Sandy ",
              new ConsLoString("had ",
                  new ConsLoString("sells ",
                  new ConsLoString("a ",
                      new ConsLoString("seashells.",
                      new ConsLoString("little ",
                          new ConsLoString("lamb.", new MtLoString()))))))))) &&
          t.checkExpect(this.sandy.interleave(this.mary), new ConsLoString("Sandy ",
              new ConsLoString("Mary ",
                     new ConsLoString("sells ",
                         new ConsLoString("had ",
                         new ConsLoString("seashells.",
                             new ConsLoString("a ",
                                 new ConsLoString("little ",
                                     new ConsLoString("lamb.", new MtLoString()))))))))) &&
          t.checkExpect(new ConsLoString("a", 
              new ConsLoString("C", 
                  new ConsLoString("E", 
                      new MtLoString()))).interleave(
            new ConsLoString("b", 
                new ConsLoString("D", new MtLoString()))), 
            new ConsLoString("a",
                new ConsLoString("b", 
                    new ConsLoString("C", 
                        new ConsLoString("D", 
                            new ConsLoString("E", new MtLoString()))))));
    }
    
    boolean testMerge(Tester t) {
      return t.checkExpect(new MtLoString().merge(new MtLoString()), new MtLoString()) &&
          t.checkExpect(new MtLoString().merge(this.mary.sort()), this.mary.sort()) &&
          t.checkExpect(this.mary.sort().merge(new MtLoString()), this.mary.sort()) &&
          t.checkExpect(this.mary.sort().merge(this.sandy.sort()), new ConsLoString("a ",
              new ConsLoString("had ",
                  new ConsLoString("lamb.",
                      new ConsLoString("little ",
                      new ConsLoString("Mary ",
                          new ConsLoString("Sandy ",
                              new ConsLoString("seashells.",
                                  new ConsLoString("sells ", new MtLoString()))))))))) &&
          t.checkExpect(new ConsLoString("a", 
                          new ConsLoString("C", 
                              new ConsLoString("E", 
                                  new MtLoString()))).merge(
                        new ConsLoString("b", 
                            new ConsLoString("D", new MtLoString()))), 
                        new ConsLoString("a",
                            new ConsLoString("b", 
                                new ConsLoString("C", 
                                    new ConsLoString("D", 
                                        new ConsLoString("E", new MtLoString()))))));
    }
    
    boolean testReverse(Tester t) {
      return t.checkExpect(new MtLoString().reverse(), new MtLoString()) &&
          t.checkExpect(this.mary.reverse(), new ConsLoString("lamb.",
              new ConsLoString("little ",
                  new ConsLoString("a ",
                      new ConsLoString("had ",
                          new ConsLoString("Mary ", new MtLoString())))))) &&
          t.checkExpect(new ConsLoString("hi there", new MtLoString()).reverse(), 
              new ConsLoString("hi there", new MtLoString()));
    }
    
    boolean testisDoubledList(Tester t) {
      return t.checkExpect(new MtLoString().isDoubledList(), true) &&
          t.checkExpect(new ConsLoString("a", new MtLoString()).isDoubledList(), false);
    }
}
